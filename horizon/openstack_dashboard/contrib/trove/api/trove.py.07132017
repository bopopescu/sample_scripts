# Copyright 2013 Rackspace Hosting.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import logging

from django.conf import settings
from troveclient.v1 import client

from openstack_dashboard.api import base

from horizon.utils import functions as utils
from horizon.utils.memoized import memoized  # noqa

import pymysql
import datetime

import smtplib
import socket
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage


LOG = logging.getLogger(__name__)

def notify(receiver, vmname, flavor, whattodo,ipaddressa,submitter):
    me = "expostack@exponential.com"
    msg = MIMEMultipart('related')
    msgAlternative = MIMEMultipart('alternative')
    receiversplit = receiver.split("@")
    if len(receiversplit)==2:
       aaaa=""
    else:
       receiver = "cloudautomation@exponential.com"
    msg['From'] = me
    you = receiver;
    msg['To'] = receiver;
    msg.preamble = 'This is a multi-part message in MIME format.'
    text = "Hi!"
    font = "<font face=verdana size=2>"
    if whattodo == "createrequeststart":
       msg['Subject'] = "Your request for virtual Machine " + vmname + "" + " is submitted"
       html1 = "<html><head></head><body>" + font + "<b>VM Name  : </b>" + vmname + "<br><b>Flavor : </b>" + flavor + "<br><br> <b>Thanks and Regards</b><br>Expostack Administrator"

    if whattodo == "deleterequeststart":
       msg['Subject'] = "Your request for virtual Machine " + vmname + "" + " destroy has been submitted"
       html1 = "<html><head></head><body>" + font + "<b>VM Name  : </b>" + vmname + "<br><b>Submitted By</b> :" + submitter + "<br><b> Thanks and Regards</b><br>Expostack Administrator"

    htmlfinal = []
    htmlb = ''.join(htmlfinal)
    html = ''.join(str(x) for x in (html1,htmlb))
    part1 = MIMEText(text, 'plain')
    part2 = MIMEText(html, 'html')
    msg.attach(msgAlternative)
    msgAlternative.attach(part1)
    msgAlternative.attach(part2)
    s = smtplib.SMTP('mail.tribalfusion.com')
    s.sendmail(me, you, msg.as_string())
    s.quit()

@memoized
def troveclient(request):
    insecure = getattr(settings, 'OPENSTACK_SSL_NO_VERIFY', False)
    cacert = getattr(settings, 'OPENSTACK_SSL_CACERT', None)
    trove_url = base.url_for(request, 'database')
    c = client.Client(request.user.username,
                      request.user.token.id,
                      project_id=request.user.project_id,
                      auth_url=trove_url,
                      insecure=insecure,
                      cacert=cacert,
                      http_log_debug=settings.DEBUG)
    c.client.auth_token = request.user.token.id
    c.client.management_url = trove_url
    return c


def cluster_list(request, marker=None):
    page_size = utils.get_page_size(request)
    return troveclient(request).clusters.list(limit=page_size, marker=marker)


def cluster_get(request, cluster_id):
    return troveclient(request).clusters.get(cluster_id)


def cluster_delete(request, cluster_id):
    return troveclient(request).clusters.delete(cluster_id)


def cluster_create(request, name, volume, flavor, num_instances,
                   datastore, datastore_version,
                   nics=None, root_password=None):
    # TODO(dklyle): adding to support trove without volume
    # support for now until API supports checking for volume support
    if volume > 0:
        volume_params = {'size': volume}
    else:
        volume_params = None
    instances = []
    for i in range(num_instances):
        instance = {}
        instance["flavorRef"] = flavor
        instance["volume"] = volume_params
        if nics:
            instance["nics"] = [{"net-id": nics}]
        instances.append(instance)

    # TODO(saurabhs): vertica needs root password on cluster create
    return troveclient(request).clusters.create(
        name,
        datastore,
        datastore_version,
        instances=instances)


def cluster_add_shard(request, cluster_id):
    return troveclient(request).clusters.add_shard(cluster_id)


def create_cluster_root(request, cluster_id, password):
    # It appears the code below depends on this trove change
    # https://review.openstack.org/#/c/166954/.  Comment out when that
    # change merges.
    # return troveclient(request).cluster.reset_root_password(cluster_id)
    troveclient(request).root.create_cluster_root(cluster_id, password)

def get_controllername(request):
    controllername1 = str(base.url_for(request, 'database')).split(':')
    controllername2 = str(controllername1[1]).split('/')
    controllername = controllername2[2]
    return controllername

def instance_list(request, marker=None):
    page_size = utils.get_page_size(request)
    return troveclient(request).instances.list(limit=page_size, marker=marker)


def instance_get(request, instance_id):
    return troveclient(request).instances.get(instance_id)


def instance_delete(request, instance_id):
    controllername1 = str(base.url_for(request, 'database')).split(':')
    controllername2 = str(controllername1[1]).split('/')
    controllername = controllername2[2]
    db = pymysql.connect(host=controllername, port=3306, user='expostack', passwd='BSoniC', db='expo_nova')
    cursor = db.cursor()
    dba = pymysql.connect(host=controllername, port=3306, user='expostack', passwd='BSoniC', db='expo_trove')
    cursora = dba.cursor()
    trovesql = "select compute_instance_id from instances where id='" + instance_id + "'"
    cursora.execute(trovesql) 
    instancenovaid = "nil"
    if cursora.rowcount == 0:
       aka=""
    else:
       resulttrove = cursora.fetchall()
       for rowstrove in resulttrove:
           instancenovaid = str(rowstrove[0])
    sql = "select d.network_info,c.hostname from instances c, instance_info_caches d where c.uuid=d.instance_uuid and c.uuid='" + instancenovaid + "'"
    cursor.execute(sql)
    resultnew = cursor.fetchall()
    generatetime1 = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
    generatetime = str(generatetime1)
    trueowner = request.user.username
    vmname = "nil"
    for rows in resultnew:
        vmname = rows[1]
        trueownersql = "select owner from lease_active_vms where hostname='" + vmname +"'"
        cursor.execute(trueownersql)
        resulttrueowner = cursor.fetchall()
        for trueownerrows in resulttrueowner:
            trueowner = trueownerrows[0]
    dba.close()
    db.close()
    if vmname == "nil":
       asdas=""
    else:
       notify(trueowner,vmname,"nil","deleterequeststart","nil",request.user.username)
    return troveclient(request).instances.delete(instance_id)


def instance_create(request, name, volume, flavor, databases=None,
                    users=None, restore_point=None, nics=None,
                    datastore=None, datastore_version=None,
                    replica_of=None, lease_days=1):
    # TODO(dklyle): adding conditional to support trove without volume
    # support for now until API supports checking for volume support
    if volume > 0:
        volume_params = {'size': volume}
    else:
        volume_params = None

    controllername1 = str(base.url_for(request, 'database')).split(':')
    controllername2 = str(controllername1[1]).split('/')
    controllername = controllername2[2]
    db = pymysql.connect(host=controllername, port=3306, user='expostack', passwd='BSoniC', db='expo_nova')
    cursor = db.cursor()
    lease_days_pass = str(lease_days)
    generatetime1 = datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')
    generatetime = str(generatetime1)
    checkexist = "select * from lease_active_vms where hostname='" + name + "'"
    cursor.execute(checkexist)
    if cursor.rowcount == 0:
       checkleaseinfo = "select * from leaseinfo where vmname='" + name + "'"
       cursor.execute(checkleaseinfo)

       if cursor.rowcount == 0:
          sql = "insert into leaseinfo values ('','" + name + "','" + lease_days_pass + "')";
       else:
          sql = "update leaseinfo set leasedays='" + lease_days_pass + "' where vmname='" + name + "'"

       cursor.execute(sql)
       db.commit()
       db.close()
       notify(request.user.username,name,str(flavor),"createrequeststart","nil","nil")

    return troveclient(request).instances.create(
        name,
        flavor,
        volume=volume_params,
        databases=databases,
        users=users,
        restorePoint=restore_point,
        nics=nics,
        datastore=datastore,
        datastore_version=datastore_version,
        replica_of=replica_of)


def instance_resize_volume(request, instance_id, size):
    return troveclient(request).instances.resize_volume(instance_id, size)


def instance_resize(request, instance_id, flavor_id):
    return troveclient(request).instances.resize_instance(instance_id,
                                                          flavor_id)


def instance_backups(request, instance_id):
    return troveclient(request).instances.backups(instance_id)


def instance_restart(request, instance_id):
    return troveclient(request).instances.restart(instance_id)


def instance_detach_replica(request, instance_id):
    return troveclient(request).instances.edit(instance_id,
                                               detach_replica_source=True)


def database_list(request, instance_id):
    return troveclient(request).databases.list(instance_id)


def database_delete(request, instance_id, db_name):
    return troveclient(request).databases.delete(instance_id, db_name)


def backup_list(request):
    return troveclient(request).backups.list()


def backup_get(request, backup_id):
    return troveclient(request).backups.get(backup_id)


def backup_delete(request, backup_id):
    return troveclient(request).backups.delete(backup_id)


def backup_create(request, name, instance_id, description=None,
                  parent_id=None):
    return troveclient(request).backups.create(name, instance_id,
                                               description, parent_id)


def flavor_list(request):
    return troveclient(request).flavors.list()


def datastore_flavors(request, datastore_name=None,
                      datastore_version=None):
    # if datastore info is available then get datastore specific flavors
    if datastore_name and datastore_version:
        try:
            return troveclient(request).flavors.\
                list_datastore_version_associated_flavors(datastore_name,
                                                          datastore_version)
        except Exception:
            LOG.warn("Failed to retrieve datastore specific flavors")
    return flavor_list(request)


def flavor_get(request, flavor_id):
    return troveclient(request).flavors.get(flavor_id)


def users_list(request, instance_id):
    return troveclient(request).users.list(instance_id)


def user_delete(request, instance_id, user):
    return troveclient(request).users.delete(instance_id, user)


def user_list_access(request, instance_id, user):
    return troveclient(request).users.list_access(instance_id, user)


def datastore_list(request):
    return troveclient(request).datastores.list()


def datastore_version_list(request, datastore):
    return troveclient(request).datastore_versions.list(datastore)
